"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Query = (function () {
    function Query() {
        this.QueryParams = [];
    }
    Query.prototype.Contains = function (key) {
        return this.QueryParams.filter(function (a) { return a.Key === key; }).length > 0;
    };
    Query.prototype.Get = function (key) {
        var queryParam = this.QueryParams.filter(function (a) { return a.Key === key; })[0];
        if (queryParam)
            return queryParam.Value;
        return null;
    };
    Query.prototype.Add = function (key, value) {
        if (value === void 0) { value = ""; }
        this.QueryParams.push(new QueryParam(key, value));
        return this;
    };
    Query.prototype.AddJson = function (obj) {
        this.QueryParams.push(new QueryParam("Json", JSON.stringify(obj)));
        return this;
    };
    Query.prototype.Remove = function (key) {
        for (var i = this.QueryParams.length - 1; i >= 0; i--) {
            if (this.QueryParams[i].Key === key) {
                this.QueryParams.splice(i, 1);
            }
        }
    };
    Query.prototype.GetBytes = function () {
        var sb = "";
        if (this.To)
            sb += (this.To);
        sb += ("|");
        if (this.From)
            sb += (this.From);
        sb += ("|");
        if (this.RequestKey)
            sb += (this.RequestKey);
        sb += ("|");
        sb += (this.Method);
        sb += ("?");
        for (var _i = 0, _a = this.QueryParams; _i < _a.length; _i++) {
            var query = _a[_i];
            sb += (query.Key);
            sb += ("=");
            sb += (encodeURIComponent(query.Value));
            sb += ("&");
        }
        var bytes = new Uint8Array(sb.length + 3 + 1);
        bytes[0] = this.Direction;
        bytes[1] = this.Type;
        bytes[2] = this.ResponseOptions;
        var b = sb.split('').map(function (x) { return x.charCodeAt(0); });
        for (var i = 0; i < b.length; i++) {
            bytes[i + 3] = b[i];
        }
        return bytes;
    };
    Query.Parse = function (continueBuffer) {
        try {
            var direction = continueBuffer[0];
            var type = continueBuffer[1];
            var responseOptions = continueBuffer[2];
            var pieces = new Buffer(continueBuffer.slice(3)).toString("utf8").split('|');
            var messageSplit = pieces[3].split('?');
            var queryParams = [];
            if (messageSplit.length === 2) {
                var split = messageSplit[1].split('&');
                for (var i = 0; i < split.length; i++) {
                    var querySplit = split[i].split('=');
                    if (querySplit) {
                        queryParams.push(new QueryParam(querySplit[0], decodeURIComponent(querySplit[1])));
                    }
                }
            }
            var query = new Query();
            query.Direction = direction;
            query.Method = messageSplit[0];
            query.Type = type;
            query.ResponseOptions = responseOptions;
            query.QueryParams = queryParams;
            if (pieces[0])
                query.To = pieces[0];
            if (pieces[1])
                query.From = pieces[1];
            if (pieces[2])
                query.RequestKey = pieces[2];
            return query;
        }
        catch (ex) {
            console.log("Failed Receive message:");
            console.log("" + new Buffer(continueBuffer).toString("utf8"));
            console.log("" + ex);
            return null;
        }
    };
    Query.BuildServerRequest = function (method, options) {
        if (options === void 0) { options = ResponseOptions.SingleResponse; }
        var q = new Query();
        q.Method = method;
        q.Direction = QueryDirection.Request;
        q.Type = QueryType.Server;
        q.ResponseOptions = options;
        return q;
    };
    Query.prototype.ToString = function () {
        var sb = "";
        sb += (this.Method);
        sb += ("?");
        this.QueryParams.forEach(function (query) {
            sb += (query.Key);
            sb += ("=");
            sb += (encodeURIComponent(query.Value));
            sb += ("&");
        });
        sb += (this.Direction);
        sb += ("/");
        sb += (this.Type);
        sb += ("|");
        sb += (this.To);
        sb += ("|");
        sb += (this.From);
        sb += ("|");
        sb += (this.RequestKey);
        sb += ("|");
        sb += (this.ResponseOptions);
        return sb;
    };
    Query.prototype.GetJson = function () {
        if (this.Contains("Json"))
            return JSON.parse(this.Get("Json"));
        return null;
    };
    return Query;
}());
exports.Query = Query;
var QueryParam = (function () {
    function QueryParam(key, value) {
        this.Key = key;
        this.Value = value.toString();
    }
    return QueryParam;
}());
exports.QueryParam = QueryParam;
var ResponseOptions;
(function (ResponseOptions) {
    ResponseOptions[ResponseOptions["SingleResponse"] = 1] = "SingleResponse";
    ResponseOptions[ResponseOptions["OpenResponse"] = 2] = "OpenResponse";
})(ResponseOptions = exports.ResponseOptions || (exports.ResponseOptions = {}));
var QueryDirection;
(function (QueryDirection) {
    QueryDirection[QueryDirection["Request"] = 1] = "Request";
    QueryDirection[QueryDirection["Response"] = 2] = "Response";
})(QueryDirection = exports.QueryDirection || (exports.QueryDirection = {}));
var QueryType;
(function (QueryType) {
    QueryType[QueryType["Client"] = 1] = "Client";
    QueryType[QueryType["Pool"] = 2] = "Pool";
    QueryType[QueryType["PoolAll"] = 3] = "PoolAll";
    QueryType[QueryType["Server"] = 4] = "Server";
})(QueryType = exports.QueryType || (exports.QueryType = {}));
//# sourceMappingURL=data:application/json;base64,